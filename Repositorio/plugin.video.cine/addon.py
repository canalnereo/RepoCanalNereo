import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys , os , re , unicodedata
import xbmcgui
import xbmcplugin
import xbmcaddon
import urllib , urllib2
import urlparse
from urlparse import parse_qsl
import sqlite3 , base64 , zlib
from urllib2 import HTTPError
if 64 - 64: i11iIiiIii
def OO0o ( s ) :
 return '' . join ( ( c for c in unicodedata . normalize ( 'NFD' , s ) if unicodedata . category ( c ) != 'Mn' ) )
 if 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o
def ii11i ( ) :
 import xbmc
 oOooOoO0Oo0O = xbmc . Keyboard ( "" )
 oOooOoO0Oo0O . doModal ( )
 iI1 = ''
 if ( oOooOoO0Oo0O . isConfirmed ( ) ) :
  iI1 = oOooOoO0Oo0O . getText ( )
 return iI1
 if 43 - 43: I11i11Ii
oO00oOo = xbmcaddon . Addon ( )
OOOo0 = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
Oooo000o = xbmc . translatePath ( oO00oOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
IiIi11iIIi1Ii = os . path . join ( OOOo0 , "resources/media/" )
Oo0O = '%s/thebas.tmp' % Oooo000o
IiI = '%s/rkobas.tmp' % Oooo000o
if not os . path . exists ( Oooo000o ) :
 try :
  os . makedirs ( Oooo000o )
 except : pass
ooOo = urlparse . parse_qs ( sys . argv [ 2 ] [ 1 : ] )
Oo = sys . argv [ 0 ]
o0O = int ( sys . argv [ 1 ] )
IiiIII111iI = ''
IiII = base64 . b64decode ( 'aHR0cDovL3d3dy5hZGRvbmNpbmUuY2xvdWQv' )
if 28 - 28: Ii11111i * iiI1i1
def i1I1ii1II1iII ( ) :
 if 86 - 86: oO0o
 if 12 - 12: OOO0o0o / o0oO0 + i111I * O0Oo0oO0o . II1iI . i1iIii1Ii1II
 i1I1Iiii1111 = [ ]
 i1I1Iiii1111 . append ( { 'title' : 'Géneros' , 'action' : 'genero' , 'ico' : 'gen' } )
 i1I1Iiii1111 . append ( { 'title' : 'Temas' , 'action' : 'tema' , 'ico' : 'tem' } )
 i1I1Iiii1111 . append ( { 'title' : 'Años' , 'action' : 'anno' , 'ico' : 'ann' } )
 i1I1Iiii1111 . append ( { 'title' : 'Grupos' , 'action' : 'grupo' , 'ico' : 'gru' } )
 i1I1Iiii1111 . append ( { 'title' : 'Países' , 'action' : 'pais' , 'ico' : 'gru' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por título' , 'action' : 'bustit' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por director' , 'action' : 'busdir' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por actor' , 'action' : 'busact' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Buscar por grupo' , 'action' : 'busgru' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Top' , 'action' : 'peltop' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas 2017-2018' , 'action' : 'ultim' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas hasta 2016' , 'action' : 'ultim2' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Últimas 100 HD' , 'action' : 'ulthd' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Las 100 más vistas' , 'action' : 'mvtas' , 'ico' : 'bus' } )
 i1I1Iiii1111 . append ( { 'title' : 'Ver peli recomendada' , 'action' : 'pelrec' , 'ico' : 'bus' } )
 return i1I1Iiii1111
 if 22 - 22: OOo000 . O0
def I11i1i11i1I ( url , post = None , txheaders = None ) :
 if txheaders == None :
  txheaders = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( url , post , txheaders )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 return iiiI11
 if 91 - 91: oOOOO / i1iiIII111ii + ii1I . oO0o
oOo0Oo = [
 [ '%s.0' % o0oOo0Ooo0O for o0oOo0Ooo0O in xrange ( 18 , 50 ) ] ,
 [ '37.0.2062.103' , '37.0.2062.120' , '37.0.2062.124' , '38.0.2125.101' , '38.0.2125.104' , '38.0.2125.111' , '39.0.2171.71' , '39.0.2171.95' , '39.0.2171.99' , '40.0.2214.93' , '40.0.2214.111' ,
 '40.0.2214.115' , '42.0.2311.90' , '42.0.2311.135' , '42.0.2311.152' , '43.0.2357.81' , '43.0.2357.124' , '44.0.2403.155' , '44.0.2403.157' , '45.0.2454.101' , '45.0.2454.85' , '46.0.2490.71' ,
 '46.0.2490.80' , '46.0.2490.86' , '47.0.2526.73' , '47.0.2526.80' , '48.0.2564.116' , '49.0.2623.112' , '50.0.2661.86' ] ,
 [ '11.0' ] ,
 [ '8.0' , '9.0' , '10.0' , '10.6' ] ]
OO00O0O0O00Oo = [ 'Windows NT 10.0' , 'Windows NT 7.0' , 'Windows NT 6.3' , 'Windows NT 6.2' , 'Windows NT 6.1' , 'Windows NT 6.0' , 'Windows NT 5.1' , 'Windows NT 5.0' ]
IIIiiiiiIii = [ '; WOW64' , '; Win64; IA64' , '; Win64; x64' , '' ]
OO = [ 'Mozilla/5.0 ({win_ver}{feature}; rv:{br_ver}) Gecko/20100101 Firefox/{br_ver}' ,
 'Mozilla/5.0 ({win_ver}{feature}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{br_ver} Safari/537.36' ,
 'Mozilla/5.0 ({win_ver}{feature}; Trident/7.0; rv:{br_ver}) like Gecko' ,
 'Mozilla/5.0 (compatible; MSIE {br_ver}; {win_ver}{feature}; Trident/6.0)' ]
if 55 - 55: iiI1i1 / o0oO0 * O0Oo0oO0o
def OoO000 ( ) :
 import random
 IIiiIiI1 = random . randrange ( len ( OO ) )
 iiIiIIi = { 'win_ver' : random . choice ( OO00O0O0O00Oo ) , 'feature' : random . choice ( IIIiiiiiIii ) , 'br_ver' : random . choice ( oOo0Oo [ IIiiIiI1 ] ) }
 ooOoo0O = OO [ IIiiIiI1 ] . format ( ** iiIiIIi )
 return ooOoo0O
 if 76 - 76: Iii1I1 / OOO0o0o . I11i11Ii * i1iIii1Ii1II - O0Oo0oO0o
def Oooo ( headers ) :
 return '|%s' % '&' . join ( [ '%s=%s' % ( O00o , urllib . quote_plus ( headers [ O00o ] ) ) for O00o in headers ] )
 if 61 - 61: OOo000 . OO0O0O * I11i11Ii . i1iiIII111ii % Ii11111i
 if 72 - 72: O0Oo0oO0o
def o0Oo00OOOOO ( string ) :
 O00o = 'sYti87g4Ut0_z'
 string = base64 . urlsafe_b64decode ( string )
 O0O = [ ]
 for o0oOo0Ooo0O in xrange ( len ( string ) ) :
  O00o0OO = O00o [ o0oOo0Ooo0O % len ( O00o ) ]
  I11i1 = chr ( ord ( string [ o0oOo0Ooo0O ] ) - ord ( O00o0OO ) % 256 )
  O0O . append ( I11i1 )
 iIi1ii1I1 = "" . join ( O0O )
 return iIi1ii1I1
 if 71 - 71: oOOOO . Iii1I1
def o0OO0oo0oOO ( user , cole , peli ) :
 return oo0oooooO0 ( 'diskokosmiko.mx' , user , cole , peli )
 if 19 - 19: II1iI + i1iiIII111ii
 if 53 - 53: iiiii . ii1I
 if 18 - 18: OOO0o0o
 I1i1I1II = 'http://diskokosmiko.mx'
 i1 = peli
 IiIiiI = '%s/-%s/p,%s,list,1,3.avi' % ( user , cole , peli )
 I1I = '%s/%s/' % ( I1i1I1II , user )
 oOO00oOO = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 OoOo = '%s/%s' % ( I1i1I1II , IiIiiI )
 oOO00oOO [ 'referer' ] = I1I
 oOO00oOO [ 'connection' ] = 'keep-alive'
 oo0ooO0oOOOOo = urllib2 . Request ( OoOo , None , oOO00oOO )
 oO000OoOoo00o = urllib2 . urlopen ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 oO000OoOoo00o . close ( )
 iI = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % peli , iiiI11 )
 o00O = 0
 try :
  iI = iI [ 0 ]
 except :
  o00O = 1
 if o00O == 0 :
  OOO0OOO00oo = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( I1i1I1II , i1 )
  Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( i1 , iI )
  oOO00oOO [ 'referer' ] = OoOo
  oOO00oOO [ 'connection' ] = 'keep-alive'
  oo0ooO0oOOOOo = urllib2 . Request ( OOO0OOO00oo , Iii111II , oOO00oOO )
  try :
   oO000OoOoo00o = urllib2 . urlopen ( oo0ooO0oOOOOo )
   iiiI11 = oO000OoOoo00o . read ( )
   oO000OoOoo00o . close ( )
   iiii11I = re . findall ( 'DownloadUrl":"([^"]+)' , iiiI11 )
   Ooo0OO0oOO = iiii11I [ 0 ]
  except :
   Ooo0OO0oOO = 'tmp'
 else :
  Ooo0OO0oOO = ''
 return Ooo0OO0oOO . strip ( )
 if 50 - 50: I11i11Ii
def oo0oooooO0 ( server , user , cole , peli ) :
 Ii1i11IIii1I = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 Iii111II = None
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( Ii1i11IIii1I , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 O0o0Ooo = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O00 = re . search ( 'action="(\/action\/DownloadFile\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiiI11 )
 iI1Ii11iII1 = 'http://%s%s' % ( server , O00 . group ( 1 ) . replace ( '&amp;' , '&' ) )
 iI = O00 . group ( 2 )
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iI )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( iI1Ii11iII1 , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 import time
 Oo0O0O0ooO0O = str ( int ( time . time ( ) ) ) + '404'
 OoOo = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , Oo0O0O0ooO0O )
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = None
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( OoOo , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 IIIIii = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O0o0 = O0o0Ooo . split ( ';' )
 OO00Oo = IIIIii . split ( ';' )
 for O0OOO0OOoO0O in OO00Oo :
  if O0OOO0OOoO0O not in O0o0 :
   O0o0 . append ( O0OOO0OOoO0O )
 OO00Oo = [ ]
 for O0OOO0OOoO0O in O0o0 :
  if 'path=/' not in O0OOO0OOoO0O and 'HttpOnly' not in O0OOO0OOoO0O :
   OO00Oo . append ( O0OOO0OOoO0O )
 O0o0Ooo = '; ' . join ( OO00Oo ) . replace ( '  ' , ' ' )
 OOO0OOO00oo = 'http://%s/action/Account/Login' % server
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Accept' ] = '*/*'
 OOOoO0O0o [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 OOOoO0O0o [ 'Accept-Encoding' ] = 'gzip, deflate'
 OOOoO0O0o [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 OOOoO0O0o [ 'X-Requested-With' ] = 'XMLHttpRequest'
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 O00Oo000ooO0 = I11i1i11i1I ( '%s/bas/doclv.php' % IiII )
 O00Oo000ooO0 = O00Oo000ooO0 . split ( '-' )
 if 100 - 100: Iii1I1 + O0 - O0Oo0oO0o + i11iIiiIii * i1iIii1Ii1II
 Iii111II = '__RequestVerificationToken=%s&UserName=%s&Password=%s' % ( iI , O00Oo000ooO0 [ 0 ] , O00Oo000ooO0 [ 1 ] )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( OOO0OOO00oo , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 IIIIii = oO000OoOoo00o . info ( ) [ 'Set-Cookie' ]
 iiiI11 = oO000OoOoo00o . read ( )
 O0o0 = O0o0Ooo . split ( ';' )
 OO00Oo = IIIIii . split ( ';' )
 for O0OOO0OOoO0O in OO00Oo :
  if O0OOO0OOoO0O not in O0o0 :
   O0o0 . append ( O0OOO0OOoO0O )
 OO00Oo = [ ]
 for O0OOO0OOoO0O in O0o0 :
  if 'path=/' not in O0OOO0OOoO0O and 'HttpOnly' not in O0OOO0OOoO0O :
   OO00Oo . append ( O0OOO0OOoO0O )
 O0o0Ooo = '; ' . join ( OO00Oo ) . replace ( '  ' , ' ' )
 IIIIii = ''
 OOOoO0O0o = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 OOOoO0O0o [ 'Referer' ] = Ii1i11IIii1I
 OOOoO0O0o [ 'Cookie' ] = O0o0Ooo
 OOOoO0O0o [ 'Connection' ] = 'keep-alive'
 Iii111II = 'fileId=%s&__RequestVerificationToken=%s' % ( peli , iI )
 Iiii = urllib2 . urlopen
 OOO0O = urllib2 . Request
 oo0ooO0oOOOOo = OOO0O ( iI1Ii11iII1 , Iii111II , OOOoO0O0o )
 oO000OoOoo00o = Iiii ( oo0ooO0oOOOOo )
 iiiI11 = oO000OoOoo00o . read ( )
 O00 = re . search ( 'DownloadUrl":"(.*?)"' , iiiI11 )
 return O00 . group ( 1 )
 if 30 - 30: OOO0o0o . i1iIii1Ii1II - iiiii
def Ii1iIiii1 ( bas ) :
 OOO = I11i1i11i1I ( '%sbas/base.enl' % IiII )
 OOO = OOO . split ( '.' )
 Oo0oOOo = 0
 if len ( OOO ) >= 8 :
  if OOO [ 6 ] == 'gd2' :
   OOO = OOO [ 7 ] . split ( '-' )
   from datetime import datetime
   OOO = 'https://goo.gl/%s' % OOO [ datetime . now ( ) . second % len ( OOO ) ]
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0OoO00oOO0o = zlib . decompress ( iiiI11 )
    Oo0oOOo = 1
   except : pass
 if ( len ( OOO ) >= 6 ) and ( Oo0oOOo == 0 ) :
  if OOO [ 4 ] == 'gd' :
   OOO = 'https://goo.gl/%s' % OOO [ 5 ]
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0OoO00oOO0o = zlib . decompress ( iiiI11 )
    Oo0oOOo = 1
   except : pass
  elif OOO [ 4 ] == 'gh' :
   OOO00O = OOO [ 5 ]
   try :
    OOO = o0OO0oo0oOO ( OOO [ 1 ] , OOO [ 2 ] , OOO [ 6 ] )
    try :
     iiiI11 = I11i1i11i1I ( OOO )
    except : pass
   except : pass
   OOO = 'https://raw.githubusercontent.com/%s/base.cmp' % OOO00O
   try :
    iiiI11 = I11i1i11i1I ( OOO )
    Oo0oOOo = 1
   except : pass
 if Oo0oOOo == 0 :
  if OOO [ 0 ] == 'dk' :
   OOO = o0OO0oo0oOO ( OOO [ 1 ] , OOO [ 2 ] , OOO [ 3 ] )
  iiiI11 = I11i1i11i1I ( OOO )
 iiiI11 = zlib . decompress ( iiiI11 )
 OOoOO0oo0ooO = open ( bas , 'wb' )
 OOoOO0oo0ooO . write ( iiiI11 )
 OOoOO0oo0ooO . close ( )
 O0o0O00Oo0o0 = sqlite3 . connect ( bas )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select version from version" )
 i1Oo00 = O00O0oOO00O00 . fetchone ( )
 i1Oo00 = i1Oo00 [ 0 ]
 O00O0oOO00O00 . execute ( "select faffid from pelis where faffid>0 group by faffid;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 iiI111I1iIiI = len ( i1i )
 O00O0oOO00O00 . execute ( "select faffid from pelis where faffid<0;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 iiI111I1iIiI += len ( i1i )
 O0o0O00Oo0o0 . close ( )
 II = 'Vers. %s (%s películas distintas)' % ( i1Oo00 , iiI111I1iIiI )
 xbmcgui . Dialog ( ) . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
 try :
  II = I11i1i11i1I ( '%s/bas/domsg.php' % IiII )
  if II != '' :
   xbmcgui . Dialog ( ) . ok ( 'Addon Cine' , II )
 except : pass
 from uuid import getnode as get_mac
 Ii1I1IIii1II = get_mac ( )
 import hashlib
 O0ii1ii1ii = hashlib . md5 ( )
 O0ii1ii1ii . update ( str ( Ii1I1IIii1II ) )
 O0ii1ii1ii = O0ii1ii1ii . hexdigest ( )
 try :
  Oo0OoO00oOO0o = I11i1i11i1I ( '%s/bas/dodev.php?dev=%s' % ( IiII , O0ii1ii1ii ) )
 except : pass
 if 91 - 91: O0
def iiIii ( bas ) :
 import xbmc
 ooo0O = ''
 if os . path . isfile ( bas ) :
  try :
   O0o0O00Oo0o0 = sqlite3 . connect ( bas )
   O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
   O00O0oOO00O00 . execute ( "Select vrsp from version" )
   oOoO0o00OO0 = O00O0oOO00O00 . fetchone ( )
   O0o0O00Oo0o0 . close ( )
   ooo0O = oOoO0o00OO0 [ 0 ]
  except : pass
  if 7 - 7: O0Oo0oO0o + oOOOO + Iii1I1
  i1Oo00 = ''
  try :
   i1Oo00 = I11i1i11i1I ( '%sbas/base.max' % IiII )
  except : pass
  if 9 - 9: ooO0OO000o . OOO0o0o - i1iiIII111ii / OOO0o0o
  if i1Oo00 != '' :
   try :
    O0o0O00Oo0o0 = sqlite3 . connect ( bas )
    O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
    O00O0oOO00O00 . execute ( "Select version from version" )
    oOoO0o00OO0 = O00O0oOO00O00 . fetchone ( )
    O0o0O00Oo0o0 . close ( )
    oOoO0o00OO0 = str ( oOoO0o00OO0 [ 0 ] )
    if oOoO0o00OO0 != i1Oo00 :
     Ii1iIiii1 ( bas )
   except :
    Ii1iIiii1 ( bas )
 else :
  Ii1iIiii1 ( bas )
  if 46 - 46: II1iI . O0Oo0oO0o * II1iI % ii1I
 O0o0O00Oo0o0 = sqlite3 . connect ( bas )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select vrsp,pdata from version" )
 oOoO0o00OO0 = O00O0oOO00O00 . fetchone ( )
 O0o0O00Oo0o0 . close ( )
 if ooo0O != oOoO0o00OO0 [ 0 ] :
  if 46 - 46: oO0o + iiI1i1
  import xbmc , xbmcaddon
  iIi1i1ii1 = xbmcaddon . Addon ( )
  OOooOO000 = xbmc . translatePath ( iIi1i1ii1 . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
  OOoOoo = oOoO0o00OO0 [ 1 ] . split ( '\n' )
  iiiI11 = base64 . b64decode ( OOoOoo [ 0 ] )
  iiiI11 = zlib . decompress ( iiiI11 )
  if not os . path . isfile ( '%s/noactualizar.txt' % OOooOO000 ) :
   OOoOO0oo0ooO = open ( '%s/addon.py' % ( OOooOO000 ) , 'wb' )
   OOoOO0oo0ooO . write ( iiiI11 )
   OOoOO0oo0ooO . close ( )
   iiiI11 = base64 . b64decode ( OOoOoo [ 1 ] )
   iiiI11 = zlib . decompress ( iiiI11 )
   OOoOO0oo0ooO = open ( '%s/addon.xml' % ( OOooOO000 ) , 'wb' )
   OOoOO0oo0ooO . write ( iiiI11 )
   OOoOO0oo0ooO . close ( )
   if 85 - 85: o0oO0 % OOo000 % i1iiIII111ii
def Oo00oo0oO ( server , user , cole , peli , last ) :
 last = base64 . b64decode ( last )
 user = o0Oo00OOOOO ( user )
 peli = o0Oo00OOOOO ( peli )
 if server == 'sc' :
  IIiIi1iI = peli . split ( ' ' )
  i1IiiiI1iI = base64 . b64decode ( 'aHR0cDovL3N0cmVhbWNsb3VkLmV1Lw==' ) + IIiIi1iI [ 0 ]
 elif server == 'dk' :
  server = base64 . b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' )
  i1IiiiI1iI = '%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , user , cole , peli )
 i1iIi = base64 . b64decode ( 'c291cmNl' )
 ooOOoooooo = base64 . b64decode ( 'aHR0cDovL2FkZG9uLmNpbmUva29kaQ==' )
 II1I = base64 . b64decode ( 'dXJscw==' )
 O0i1II1Iiii1I11 = base64 . b64decode ( 'c3VibWl0' )
 IIII = base64 . b64decode ( 'bG9xdWVz' )
 iiIiI = base64 . b64decode ( 'aHR0cDovLzEyNy4wLjAuMTo5NjY2L2ZsYXNoL2FkZA==' )
 o00oooO0Oo = { i1iIi : ooOOoooooo , II1I : i1IiiiI1iI , O0i1II1Iiii1I11 : IIII }
 if 78 - 78: i1iIii1Ii1II % oOOOO + o0oO0
 OOooOoooOoOo = urllib2 . HTTPHandler ( )
 o0OOOO00O0Oo = urllib2 . build_opener ( OOooOoooOoOo )
 iiiI11 = urllib . urlencode ( o00oooO0Oo )
 ii = urllib2 . Request ( iiIiI , data = iiiI11 )
 oOooOOOoOo = o0OOOO00O0Oo . open ( ii )
 II = 'Link copiado a JDownloader'
 xbmcgui . Dialog ( ) . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
 xbmcplugin . endOfDirectory ( o0O )
 if 41 - 41: i1iIii1Ii1II - Iii1I1 - Iii1I1
def oO00OOoO00 ( s ) :
 return base64 . urlsafe_b64encode ( s )
 if 40 - 40: I11i11Ii * i1iIii1Ii1II + O0Oo0oO0o % OOo000
def OOOOOoo0 ( ) :
 ii1 = ''
 if 11 - 11: O0 * I11i11Ii . OO0O0O % iiiii + OOo000
 OOOoo0OOo0 = base64 . b64decode ( 'IzAzIzQzIzI1IzE3' )
 if 47 - 47: oOOOO + oO0o * Ii11111i / i1iiIII111ii - OOo000 % OO0O0O
 if 26 - 26: o0oO0 * OOo000 . ooO0OO000o * i1iIii1Ii1II
 I1I = base64 . b64decode ( 'aHR0cDovL3d3dy5jdWFsZXNtaWlwLmNvbS8=' )
 oo0ooO0oOOOOo = I11i1i11i1I ( I1I , None )
 II1 = re . search ( '<b>Tu IP real es (.*?)<b' , oo0ooO0oOOOOo )
 if II1 :
  II1 = II1 . group ( 1 )
  if 23 - 23: i11iIiiIii + OOO0o0o . ii1I
  I1I = base64 . b64decode ( 'aHR0cHM6Ly9nZW9pcHRvb2wuY29tL2VzLz9pcD0=' ) + II1
  oo0ooO0oOOOOo = I11i1i11i1I ( I1I , None )
  if 100 - 100: oOOOO . i111I * i1iIii1Ii1II
  i1i1Iiii1I1 = re . search ( base64 . b64decode ( 'UG9zdGFsOltcc1xTXSo/PHNwYW4+KC4qPyk8' ) , oo0ooO0oOOOOo )
  if i1i1Iiii1I1 :
   i1i1Iiii1I1 = i1i1Iiii1I1 . group ( 1 )
   ii1 = '#' + i1i1Iiii1I1 [ : 2 ]
 ii1 = ii1 in OOOoo0OOo0
 return ii1
 if 53 - 53: ooO0OO000o
def i1Ii1Ii ( encoded , code ) :
 oOO = ""
 ii1iII1II = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
 ii1iII1II = ii1iII1II [ : : - 1 ]
 Iii1I1I11iiI1 = 0
 for IIiiIiI1 in range ( 0 , len ( encoded ) - 1 ) :
  while Iii1I1I11iiI1 <= len ( encoded ) - 1 :
   I1I1i1I = ii1iII1II . index ( encoded [ Iii1I1I11iiI1 ] )
   ii1IO0oO0 = ii1iII1II . index ( encoded [ Iii1I1I11iiI1 + 1 ] )
   oO0 = ii1iII1II . index ( encoded [ Iii1I1I11iiI1 + 2 ] )
   O0OO0O = ii1iII1II . index ( encoded [ Iii1I1I11iiI1 + 3 ] )
   Iii1I1I11iiI1 += 4
   OOOoOoO = ( ( I1I1i1I << 2 ) | ( ii1IO0oO0 >> 4 ) )
   Ii1I1i = ( ( ( ii1IO0oO0 & 15 ) << 4 ) | ( oO0 >> 2 ) )
   OOI1iI1ii1II = ( ( oO0 & 3 ) << 6 ) | O0OO0O
   OOOoOoO = OOOoOoO ^ code
   oOO = str ( oOO ) + chr ( OOOoOoO )
   if oO0 != 64 :
    oOO = str ( oOO ) + chr ( Ii1I1i )
   if oO0 != 64 :
    oOO = str ( oOO ) + chr ( OOI1iI1ii1II )
 return oOO
 if 57 - 57: oOOOO % i1iIii1Ii1II + OOO0o0o - Ii11111i
def o0OIiI1i ( server , user , cole , pel , pid , tit ) :
 o0O = int ( sys . argv [ 1 ] )
 if 92 - 92: O0 . O0 + iiI1i1
 iiIii ( Oo0O )
 if 9 - 9: I11i11Ii * Iii1I1 + O0 - II1iI * oOOOO
 Oooo0oOO = server . split ( '_' )
 server = Oooo0oOO [ 0 ]
 if len ( Oooo0oOO ) > 1 :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
  O0o0O00Oo0o0 . commit ( )
  Ooo00O00o = Oooo0oOO [ 1 ] . split ( '.' )
  for O0O00Oo in Ooo00O00o :
   O00O0oOO00O00 . execute ( 'INSERT INTO reco(idpel) VALUES (?);' , ( O0O00Oo , ) )
  O0o0O00Oo0o0 . commit ( )
  O0o0O00Oo0o0 . close ( )
 tit = base64 . urlsafe_b64decode ( tit )
 user = o0Oo00OOOOO ( user )
 pel = o0Oo00OOOOO ( pel )
 cole = o0Oo00OOOOO ( cole )
 if 97 - 97: Iii1I1 * iiiii . iiiii
 if 33 - 33: oOOOO + OOo000 * i111I / OO0O0O - I11i11Ii
 if 54 - 54: oOOOO / O0Oo0oO0o . i111I % OOo000
 if 57 - 57: i11iIiiIii . o0oO0 - i1iIii1Ii1II - i111I + oO0o
 if 63 - 63: oO0o * OOo000
 if 69 - 69: Iii1I1 . iiI1i1
 if 49 - 49: I11i11Ii - II1iI
 if 74 - 74: OO0O0O * o0oO0 + oO0o / ii1I / ooO0OO000o . Ii11111i
 if 62 - 62: iiiii * I11i11Ii
 if 58 - 58: oO0o % OOO0o0o
 if 50 - 50: oOOOO . OOO0o0o
 try :
  I1I = '%sbas/doseek.php?id=%s' % ( IiII , pid )
  Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
 except : pass
 if 97 - 97: Iii1I1 + oO0o
 if server == 'kb' :
  Ooo0OO0oOO = oo0oooooO0 ( 'kbagi.com' , user , cole , pel )
  OO0O000 = xbmcgui . ListItem ( path = Ooo0OO0oOO . strip ( ) )
  iiIiI1i1 ( OO0O000 , tit , pid )
  xbmcplugin . setResolvedUrl ( o0O , True , OO0O000 )
 elif server == 'dk' :
  Ooo0OO0oOO = o0OO0oo0oOO ( user , cole , pel )
  if Ooo0OO0oOO == '' :
   try :
    I1I = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
    Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
   except : pass
   II = 'La película ya no existe'
   OO0O000 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , OO0O000 )
   oO0O00oOOoooO = xbmcgui . Dialog ( )
   oO0O00oOOoooO . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
  if Ooo0OO0oOO == 'tmp' :
   II = 'Servidor temporalmente caído'
   OO0O000 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
   xbmcplugin . setResolvedUrl ( o0O , False , OO0O000 )
   oO0O00oOOoooO = xbmcgui . Dialog ( )
   oO0O00oOOoooO . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
  else :
   OO0O000 = xbmcgui . ListItem ( path = Ooo0OO0oOO . strip ( ) )
   iiIiI1i1 ( OO0O000 , tit , pid )
   xbmcplugin . setResolvedUrl ( o0O , True , OO0O000 )
 elif server == 'sc' :
  iiIiI = 'sg'
  IiIi11iI = pel . split ( ' ' )
  Oo0O00O000 = pel . split ( ' ' )
  if 3 - 3: i1iIii1Ii1II * o0oO0 % II1iI
  if 59 - 59: i111I - OOo000
  import datetime
  I1 = datetime . datetime . today ( ) . weekday ( )
  for ii1I1 in range ( I1 ) :
   IiIi11iI . append ( IiIi11iI . pop ( 0 ) )
   Oo0O00O000 . append ( Oo0O00O000 . pop ( 0 ) )
   if 93 - 93: Iii1I1 % ii1I . O0Oo0oO0o / I11i11Ii - oOOOO / I11i11Ii
  while 1 == 1 :
   if not Oo0O00O000 :
    II = 'Película en preparación'
    OO0O000 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , OO0O000 )
    oO0O00oOOoooO = xbmcgui . Dialog ( )
    oO0O00oOOoooO . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   for II1IiiIi1i in IiIi11iI :
    Oo0O00O000 . remove ( II1IiiIi1i )
    if len ( II1IiiIi1i ) == 12 :
     iiIiI = 'sc'
     I1I = 'http://streamcloud.eu/%s' % II1IiiIi1i
     iiiI11 = ''
     try :
      iiiI11 = I11i1i11i1I ( I1I )
      if ( "<h1>File Not Found</h1>" in iiiI11 ) or ( "<h1>Archivo no encontrado</h1>" in iiiI11 ) or ( iiiI11 == 'Not Found' ) :
       iiiI11 = ''
      else :
       if iiiI11 != '' : break
     except HTTPError :
      II = 'El servidor StreamCloud parece caído, prueba más tarde.'
      OO0O000 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
      xbmcplugin . setResolvedUrl ( o0O , False , OO0O000 )
      oO0O00oOOoooO = xbmcgui . Dialog ( )
      oO0O00oOOoooO . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
      iiiI11 = 'bye'
      break
    elif len ( II1IiiIi1i ) == 16 :
     iiIiI = 'sg'
     I1I = 'https://streamango.com/embed/%s' % II1IiiIi1i
     iiI11ii1I1 = { 'User-Agent' : OoO000 ( ) }
     iiiI11 = I11i1i11i1I ( I1I , txheaders = iiI11ii1I1 )
     if ( '>Sorry!<' in iiiI11 ) :
      iiiI11 = ''
     else :
      if iiiI11 != '' : break
   IiIi11iI = Oo0O00O000
   if iiiI11 == '' :
    try :
     I1I = '%sbas/donoexist.php?id=%s' % ( IiII , pid )
     Oo0OoO00oOO0o = I11i1i11i1I ( I1I )
    except : pass
    II = 'La película ya no existe'
    OO0O000 = xbmcgui . ListItem ( II , iconImage = "DefaultVideo.png" )
    xbmcplugin . setResolvedUrl ( o0O , False , OO0O000 )
    oO0O00oOOoooO = xbmcgui . Dialog ( )
    oO0O00oOOoooO . notification ( 'Cine' , II , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif iiiI11 == 'bye' :
    break
   if iiIiI == 'sc' :
    Ooo0OO0oOO = re . findall ( 'file\: "([^"]+)"' , iiiI11 , flags = re . DOTALL )
    if not Ooo0OO0oOO :
     Iii111II = ""
     Ooo0OOoOoO0 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiiI11 , flags = re . DOTALL )
     for oOo0OOoO0 , IIo0Oo0oO0oOO00 in Ooo0OOoOoO0 :
      Iii111II += oOo0OOoO0 + "=" + IIo0Oo0oO0oOO00 + "&"
     Iii111II = Iii111II . replace ( "op=download1" , "op=download2" )
     iiiI11 = I11i1i11i1I ( I1I , post = Iii111II )
     if 'id="justanotice"' in iiiI11 :
      return [ ]
     Ooo0OO0oOO = re . findall ( 'file\: "([^"]+)"' , iiiI11 , flags = re . DOTALL )
    try :
     Ooo0OO0oOO = Ooo0OO0oOO [ 0 ]
     OO0O000 = xbmcgui . ListItem ( path = Ooo0OO0oOO )
     iiIiI1i1 ( OO0O000 , tit , pid )
     xbmcplugin . setResolvedUrl ( o0O , True , OO0O000 )
     break
    except :
     pass
   elif iiIiI == 'sg' :
    if 92 - 92: iiiii * oOOOO
    o0000oO = re . search ( '''srces\.push\([\S\s*]{type:"video/mp4",src:\w+\('([^']+)',(\d+)''' , iiiI11 )
    if o0000oO :
     I1II1 = i1Ii1Ii ( o0000oO . group ( 1 ) , int ( o0000oO . group ( 2 ) ) )
     if I1II1 :
      I1II1 = "http:%s" % I1II1 if I1II1 . startswith ( "//" ) else I1II1
      I1II1 = I1II1 . split ( "/" )
      if not I1II1 [ - 1 ] . isdigit ( ) :
       I1II1 [ - 1 ] = re . sub ( '[^\d]' , '' , I1II1 [ - 1 ] )
      I1II1 = "/" . join ( I1II1 )
      iiI11ii1I1 . update ( { 'Referer' : I1I } )
      Ooo0OO0oOO = I1II1 + Oooo ( iiI11ii1I1 )
      import xbmc
      xbmc . log ( 'JJSG = ' + Ooo0OO0oOO )
      try :
       OO0O000 = xbmcgui . ListItem ( path = Ooo0OO0oOO )
       iiIiI1i1 ( OO0O000 , tit , pid )
       xbmcplugin . setResolvedUrl ( o0O , True , OO0O000 )
       break
      except :
       pass
       if 86 - 86: OO0O0O / oO0o . ooO0OO000o
def II1i111Ii1i ( ) :
 iiIii ( Oo0O )
 i1I1Iiii1111 = i1I1ii1II1iII ( )
 iii1 = [ ]
 for ooO0oooOO0 in i1I1Iiii1111 :
  o0o = '%s/%s.png' % ( IiIi11iIIi1Ii , ooO0oooOO0 [ 'ico' ] )
  oo0 = xbmcgui . ListItem ( label = ooO0oooOO0 [ 'title' ] , iconImage = o0o )
  I1I = '{0}?action={1}' . format ( Oo , ooO0oooOO0 [ 'action' ] )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(500)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 9 - 9: Iii1I1 % Iii1I1 - OOO0o0o
 if 51 - 51: I11i11Ii . OO0O0O - o0oO0 / Iii1I1
 if 52 - 52: OOO0o0o + Iii1I1 + OOo000 + Ii11111i % OOo000
 if 75 - 75: I11i11Ii . i1iiIII111ii . Iii1I1 * oOOOO
 if 4 - 4: i1iIii1Ii1II % i111I * iiI1i1
 if 100 - 100: oOOOO * O0Oo0oO0o + O0Oo0oO0o
def OoOO0o ( pid , cur ) :
 i1II1 = ''
 cur . execute ( "SELECT genero FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen where pelgen.idpel=? ORDER BY pelgen.id" , ( pid , ) )
 i1i = cur . fetchall ( )
 if i1i :
  i11i1 = [ ]
  for oOoO0o00OO0 in i1i :
   i11i1 . append ( oOoO0o00OO0 [ 0 ] )
  i1II1 = ', ' . join ( i11i1 )
 return i1II1
 if 42 - 42: i11iIiiIii * OO0O0O / o0oO0 . i11iIiiIii % II1iI
def i1iI ( pid , cur ) :
 IiI1iiiIii = [ ]
 cur . execute ( "SELECT actor FROM actores INNER JOIN pelact ON actores.id = pelact.idact where pelact.idpel=? ORDER BY pelact.id" , ( pid , ) )
 i1i = cur . fetchall ( )
 if i1i :
  for oOoO0o00OO0 in i1i :
   IiI1iiiIii . append ( oOoO0o00OO0 [ 0 ] )
 return IiI1iiiIii
 if 7 - 7: oOOOO * iiI1i1 - i1iiIII111ii + O0Oo0oO0o * I11i11Ii % iiI1i1
def iI1i111I1Ii ( cur , row , listitem , tit ) :
 i11i1ii1I = row [ 0 ]
 o0OO0o0o00o = row [ 7 ]
 oOo0 = row [ 8 ]
 OOOoOO = row [ 9 ]
 I11IIIi = row [ 12 ]
 iIIiiI1II1i11 = row [ 15 ]
 i1II1 = OoOO0o ( i11i1ii1I , cur )
 o0o0 = i1iI ( i11i1ii1I , cur )
 if 49 - 49: i111I - i11iIiiIii . oOOOO * i1iIii1Ii1II % OOo000 + ii1I
 listitem . setInfo ( 'video' , { 'title' : tit , 'year' : oOo0 , 'director' : I11IIIi , 'plot' : OOOoOO , 'genre' : i1II1 , 'cast' : o0o0 , 'rating' : iIIiiI1II1i11 } )
 if 71 - 71: OOO0o0o
def iiIiI1i1 ( listitem , tit , pid ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis WHERE pelis.id=?;" , ( pid , ) )
 oOoO0o00OO0 = O00O0oOO00O00 . fetchone ( )
 iI1i111I1Ii ( O00O0oOO00O00 , oOoO0o00OO0 , listitem , tit )
 O0o0O00Oo0o0 . close ( )
 if 38 - 38: i111I % oO0o + o0oO0 . i11iIiiIii
def oo0000ooooO0o ( rows = [ ] , tipo2 = False , zid = '' , nota = False , mvta = False ) :
 try :
  xbmcplugin . setContent ( o0O , "movies" )
  xbmc . executebuiltin ( "Container.SetViewMode(515)" )
 except : pass
 if 40 - 40: o0oO0 + ii1I * O0Oo0oO0o
 if 85 - 85: i1iIii1Ii1II * Ii11111i . Iii1I1 - i11iIiiIii
 if 18 - 18: i1iIii1Ii1II + O0 - Iii1I1
 if 53 - 53: ii1I
 if 87 - 87: i11iIiiIii + oOOOO . o0oO0 * oOOOO . i1iiIII111ii / o0oO0
 if 76 - 76: Iii1I1 + ii1I . Ii11111i * I11i11Ii * i1iIii1Ii1II
 if 14 - 14: OOO0o0o % Iii1I1 * OOo000 + i1iIii1Ii1II + Ii11111i * i1iIii1Ii1II
 if 3 - 3: oO0o * Ii11111i
 if 95 - 95: O0Oo0oO0o % i111I . i1iIii1Ii1II
 if 72 - 72: iiiii
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 72 - 72: I11i11Ii % i11iIiiIii . Ii11111i / ooO0OO000o
 iii1 = [ ]
 iIIiIiI = 0
 iIi11 = 0
 for oOoO0o00OO0 in rows :
  i11i1ii1I = oOoO0o00OO0 [ 0 ]
  iiIiI = oOoO0o00OO0 [ 1 ]
  OOoo = oOoO0o00OO0 [ 2 ]
  iIIiiiI = oOoO0o00OO0 [ 3 ]
  IIiIi1iI = oOoO0o00OO0 [ 4 ]
  oo0IiI111ii1ii = oOoO0o00OO0 [ 5 ]
  O0OOo = oOoO0o00OO0 [ 6 ]
  IiIII1 = oOoO0o00OO0 [ 7 ]
  oOo0 = oOoO0o00OO0 [ 8 ]
  OOOoOO = oOoO0o00OO0 [ 9 ]
  O0Oo000 = oOoO0o00OO0 [ 11 ]
  I11IIIi = oOoO0o00OO0 [ 12 ]
  iIIiiI1II1i11 = oOoO0o00OO0 [ 15 ]
  iiI11i1II = oOoO0o00OO0 [ 21 ]
  OO0O0OOo0O = oOoO0o00OO0 [ 22 ]
  i1II1 = OoOO0o ( i11i1ii1I , O00O0oOO00O00 )
  o0o0 = i1iI ( i11i1ii1I , O00O0oOO00O00 )
  if 36 - 36: i1iiIII111ii . Ii11111i % i1iiIII111ii % iiI1i1
  if IiIII1 != iIi11 :
   iIi11 = IiIII1
   iIIiIiI += 1
   if 2 - 2: OOO0o0o - o0oO0
  o0OOOo = O0OOo
  if iiI11i1II == None :
   iiI11i1II = O0Oo000
  else :
   if iiI11i1II . startswith ( '/' ) :
    iiI11i1II = 'https://image.tmdb.org/t/p/w500%s' % iiI11i1II
  if OO0O0OOo0O == None :
   OO0O0OOo0O = O0Oo000
  else :
   if OO0O0OOo0O . startswith ( '/' ) :
    OO0O0OOo0O = 'https://image.tmdb.org/t/p/original%s' % OO0O0OOo0O
  if oo0IiI111ii1ii == 'S' :
   if iiIiI == 'sc' :
    O0OOo = '[COLOR lightskyblue]%s (HD)[/COLOR]' % O0OOo
   else :
    O0OOo = '[COLOR khaki]%s (HD)[/COLOR]' % O0OOo
  if oo0IiI111ii1ii == '3D' :
   O0OOo = '[COLOR limegreen]%s (3D)[/COLOR]' % O0OOo
  if tipo2 :
   O0OOo = '[COLOR orange]%s[/COLOR] %s' % ( oOo0 , O0OOo )
  if nota :
   O0OOo = '%s [COLOR blue](%s)[/COLOR]' % ( O0OOo , iIIiiI1II1i11 )
  if mvta == True :
   O0OOo = '%s. %s' % ( str ( iIIiIiI ) , O0OOo )
  oo0 = xbmcgui . ListItem ( label = O0OOo , iconImage = O0Oo000 )
  iI1i111I1Ii ( O00O0oOO00O00 , oOoO0o00OO0 , oo0 , O0OOo )
  oo0 . setArt ( { 'thumb' : iiI11i1II , 'icon' : iiI11i1II , 'fanart' : OO0O0OOo0O } )
  oo0 . addStreamInfo ( 'audio' , { 'language' : 'es' } )
  oo0 . setProperty ( 'IsPlayable' , 'true' )
  if 11 - 11: OO0O0O * OO0O0O * I11i11Ii
  if 46 - 46: oO0o + iiI1i1
  if 70 - 70: OOo000 / OO0O0O
  if 85 - 85: iiiii % ii1I * iiiii / o0oO0
  if 96 - 96: iiiii + i111I
  iiIiI = '%s%s' % ( iiIiI , zid )
  I1I = '{0}?action=play&server={1}&user={2}&cole={3}&peli={4}&id={5}&tit={6}' . format ( Oo , iiIiI , OOoo , iIIiiiI , IIiIi1iI , i11i1ii1I , base64 . urlsafe_b64encode ( o0OOOo . encode ( 'utf-8' ) ) )
  oOOOoo00 = False
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 O0o0O00Oo0o0 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 44 - 44: i111I
def I1i11i ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT generos.id, genero, Count(idpel) FROM generos INNER JOIN pelgen ON generos.id = pelgen.idgen GROUP BY generos.genero ORDER BY genero2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  iiI111I1iIiI = oOoO0o00OO0 [ 2 ]
  OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( i11i1 , iiI111I1iIiI )
  oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
  I1I = '{0}?action=genero2&idgen={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 30 - 30: OO0O0O . I11i11Ii . O0Oo0oO0o / OOO0o0o
def iiI1I1 ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , nota = True )
 if 56 - 56: I11i11Ii . Iii1I1 + Ii11111i
def i1II1I1Iii1 ( idtem ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? and pelis.valoracion>0 ORDER BY pelis.valoracion DESC, pelis.grupo, pelis.hd DESC, pelis.id;" , ( idtem , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , nota = True )
 if 30 - 30: iiiii - oO0o
def Ooo00O0o ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelgen.idgen=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i )
 if 72 - 72: OO0O0O * i1iIii1Ii1II % i1iiIII111ii / iiI1i1
def I11i1II ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT temas.id, tema, Count(idpel) FROM temas INNER JOIN peltem ON temas.id = peltem.idtem GROUP BY temas.tema ORDER BY tema2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  iiI111I1iIiI = oOoO0o00OO0 [ 2 ]
  OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( i11i1 , iiI111I1iIiI )
  oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
  I1I = '{0}?action=tema2&idtem={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 72 - 72: OO0O0O . ii1I / Ii11111i . ooO0OO000o
def ooo000o000 ( idtem ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN peltem ON pelis.ID = peltem.idpel WHERE peltem.idtem=? ORDER BY pelis.grupo, pelis.hd, pelis.id;" , ( idtem , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i )
 if 100 - 100: O0 . II1iI / i1iIii1Ii1II % oO0o % ooO0OO000o - iiI1i1
def IiIi1I1ii111 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select anno,count(id) from pelis group by anno order by anno" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 for oOoO0o00OO0 in i1i :
  IiIiIi = oOoO0o00OO0 [ 0 ]
  iiI111I1iIiI = oOoO0o00OO0 [ 1 ]
  OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( IiIiIi , iiI111I1iIiI )
  oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
  I1I = '{0}?action=anno2&anno={1}' . format ( Oo , IiIiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 try :
  xbmcplugin . setContent ( o0O , "files" )
  xbmc . executebuiltin ( "Container.SetViewMode(502)" )
 except : pass
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 27 - 27: o0oO0 + oO0o - O0Oo0oO0o + Iii1I1 . i1iIii1Ii1II
def iIi1i1iIi1iI ( anno ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select * from pelis where anno = ? order by grupo, hd;" , ( anno , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i )
 if 26 - 26: iiiii * I11i11Ii + O0Oo0oO0o
def IiIii1i111 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  iiI111I1iIiI = oOoO0o00OO0 [ 2 ]
  OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( i11i1 , iiI111I1iIiI )
  oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
  I1I = '{0}?action=grupo2&idgru={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 43 - 43: Iii1I1
def Ii1 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 14 - 14: OO0O0O % OO0O0O * i11iIiiIii - iiI1i1 - II1iI
 if 63 - 63: iiI1i1
 if 69 - 69: OO0O0O . o0oO0 % i1iiIII111ii + OO0O0O / Iii1I1 / o0oO0
 O00O0oOO00O00 . execute ( "SELECT pais, Count(id) FROM pelis group by pais order by repe,pais;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 for oOoO0o00OO0 in i1i :
  O00OoOO0oo0 = oOoO0o00OO0 [ 0 ]
  iiI111I1iIiI = oOoO0o00OO0 [ 1 ]
  oOOO0o0OO0000ooo = base64 . urlsafe_b64encode ( O00OoOO0oo0 . encode ( 'utf-8' ) )
  if O00OoOO0oo0 . encode ( 'utf-8' ) == 'España' :
   O00OoOO0oo0 = 'ESPAÑA' . decode ( 'utf-8' )
  OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( O00OoOO0oo0 , iiI111I1iIiI )
  oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
  I1I = '{0}?action=pais2&pais={1}' . format ( Oo , oOOO0o0OO0000ooo )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 4 - 4: i1iIii1Ii1II
def OO0oOOoo ( ) :
 oOOO00o000o = ii11i ( )
 if oOOO00o000o :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  oOOO00o000o = OO0o ( unicode ( oOOO00o000o . decode ( 'utf-8' ) ) ) . upper ( )
  oOOO00o000o = '%' + oOOO00o000o + '%'
  O00O0oOO00O00 . execute ( "SELECT grupos.id, grupo, Count(idgru) FROM grupos INNER JOIN pelgru ON grupos.id = pelgru.idgru WHERE grupo2 like ? GROUP BY grupos.id having count(grupos.id)>1 ORDER BY grupo2" , ( oOOO00o000o , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  iii1 = [ ]
  for oOoO0o00OO0 in i1i :
   IiIi = oOoO0o00OO0 [ 0 ]
   i11i1 = oOoO0o00OO0 [ 1 ]
   iiI111I1iIiI = oOoO0o00OO0 [ 2 ]
   OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( i11i1 , iiI111I1iIiI )
   oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
   I1I = '{0}?action=grupo2&idgru={1}' . format ( Oo , IiIi )
   oOOOoo00 = True
   iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
  xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 9 - 9: i111I + II1iI / II1iI
def Ii1I11ii1i ( idgru ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelgru ON pelis.ID = pelgru.idpel WHERE pelgru.idgru=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( idgru , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , True )
 if 89 - 89: OOo000 . Iii1I1 / o0oO0 % oO0o . Ii11111i
def IiiI1i ( pais ) :
 pais = base64 . b64decode ( pais ) . decode ( 'utf-8' )
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis WHERE pais=? ORDER BY pelis.anno, pelis.grupo, pelis.hd, pelis.id;" , ( pais , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , True )
 if 51 - 51: O0
def ii11I1 ( ) :
 oOOO00o000o = ii11i ( )
 if oOOO00o000o :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  oOOO00o000o = OO0o ( unicode ( oOOO00o000o . decode ( 'utf-8' ) ) ) . upper ( )
  oOOO00o000o = '%' + oOOO00o000o + '%'
  O00O0oOO00O00 . execute ( "Select * from pelis where grupo like ? order by grupo" , ( oOOO00o000o , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  oo0000ooooO0o ( i1i )
  if 75 - 75: iiI1i1 / ooO0OO000o % Iii1I1
def Ii111iIi1iIi ( ) :
 oOOO00o000o = ii11i ( )
 if oOOO00o000o :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  oOOO00o000o = OO0o ( unicode ( oOOO00o000o . decode ( 'utf-8' ) ) ) . upper ( )
  oOOO00o000o = '%' + oOOO00o000o + '%'
  O00O0oOO00O00 . execute ( "Select director, count(id) from pelis group by director having director2 like ? order by director2" , ( oOOO00o000o , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  iii1 = [ ]
  for oOoO0o00OO0 in i1i :
   I11IIIi = oOoO0o00OO0 [ 0 ] . encode ( 'utf-8' )
   iiI111I1iIiI = oOoO0o00OO0 [ 1 ]
   OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( I11IIIi , iiI111I1iIiI )
   oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
   I1I = '{0}?action=busdir2&director={1}' . format ( Oo , I11IIIi )
   oOOOoo00 = True
   iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
  xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 21 - 21: i111I / o0oO0 + i1iIii1Ii1II + iiiii
def OoOoI1iI11iIiIi1 ( director ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select * from pelis where director = ? order by anno, grupo, id" , ( director . decode ( 'utf-8' ) , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , True )
 if 72 - 72: oOOOO
def OO0ooo0oOO ( ) :
 oOOO00o000o = ii11i ( )
 if oOOO00o000o :
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  oOOO00o000o = OO0o ( unicode ( oOOO00o000o . decode ( 'utf-8' ) ) ) . upper ( )
  oOOO00o000o = '%' + oOOO00o000o + '%'
  O00O0oOO00O00 . execute ( "SELECT actores.id, actor, Count(idact) FROM actores INNER JOIN pelact ON actores.id = pelact.idact GROUP BY actores.actor having actor2 like ? ORDER BY actor2" , ( oOOO00o000o , ) )
  i1i = O00O0oOO00O00 . fetchall ( )
  O0o0O00Oo0o0 . close ( )
  iii1 = [ ]
  for oOoO0o00OO0 in i1i :
   oo000 = oOoO0o00OO0 [ 0 ]
   IiI1iiiIii = oOoO0o00OO0 [ 1 ]
   iiI111I1iIiI = oOoO0o00OO0 [ 2 ]
   OOOOO0O00 = '[COLOR gold]%s[/COLOR] (%s)' % ( IiI1iiiIii , iiI111I1iIiI )
   oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
   I1I = '{0}?action=busact2&idact={1}' . format ( Oo , oo000 )
   oOOOoo00 = True
   iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
  xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
  xbmcplugin . endOfDirectory ( o0O )
  if 32 - 32: ii1I . i1iIii1Ii1II
def oOOOooo ( idact ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN pelact ON pelis.ID = pelact.idpel WHERE pelact.idact=? ORDER BY pelis.anno, pelis.grupo, pelis.id;" , ( idact , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , True )
 if 16 - 16: O0Oo0oO0o % OOo000 . Iii1I1 / Ii11111i / OOO0o0o
def ooOO0oO0oo00o ( ) :
 import datetime
 IiIiIi = datetime . datetime . now ( ) . year
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb is not null and anno>=? order by gb, HD LIMIT(100);" , ( IiIiIi - 1 , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , False )
 if 83 - 83: i111I - ooO0OO000o - OOo000
def iIi11iiIiI1I ( ) :
 import datetime
 IiIiIi = datetime . datetime . now ( ) . year
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb is not null and anno<? order by gb, HD LIMIT(100);" , ( IiIiIi - 1 , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , False )
 if 3 - 3: ii1I / ooO0OO000o / i11iIiiIii * ii1I - ooO0OO000o
def Ii ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 14 - 14: OOO0o0o * i111I
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where vta>0 order by vta DESC,HD;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , False , mvta = True )
 if 81 - 81: i1iIii1Ii1II * OOO0o0o + oOOOO + Ii11111i - iiiii
def i1i1I111iIi1 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 if 92 - 92: i1iiIII111ii
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis where gb2>0 order by gb2, server;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , False )
 if 22 - 22: Ii11111i % OOo000 * o0oO0 / O0Oo0oO0o % i11iIiiIii * II1iI
def Oo00OoOo ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select id,genero from generos order by genero2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 iii1 = [ ]
 OOOOO0O00 = '[COLOR gold]*** GÉNEROS ***[/COLOR]'
 oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
 oOOOoo00 = False
 iii1 . append ( ( '' , oo0 , oOOOoo00 ) )
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  oo0 = xbmcgui . ListItem ( label = i11i1 , iconImage = '' )
  I1I = '{0}?action=TopGen&idgen={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 O00O0oOO00O00 . execute ( "Select id,tema from temas order by tema2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 OOOOO0O00 = '[COLOR gold]*** TEMAS ***[/COLOR]'
 oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
 oOOOoo00 = False
 iii1 . append ( ( '' , oo0 , oOOOoo00 ) )
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  oo0 = xbmcgui . ListItem ( label = i11i1 , iconImage = '' )
  I1I = '{0}?action=TopTem&idtem={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 O0o0O00Oo0o0 . close ( )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 24 - 24: i11iIiiIii - oOOOO
def i11iiI1111 ( ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( "Select id,genero from generos order by genero2;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 iii1 = [ ]
 OOOOO0O00 = '[COLOR gold]Selecciona un género[/COLOR]'
 oo0 = xbmcgui . ListItem ( label = OOOOO0O00 , iconImage = '' )
 oOOOoo00 = False
 iii1 . append ( ( '' , oo0 , oOOOoo00 ) )
 for oOoO0o00OO0 in i1i :
  IiIi = oOoO0o00OO0 [ 0 ]
  i11i1 = oOoO0o00OO0 [ 1 ]
  oo0 = xbmcgui . ListItem ( label = i11i1 , iconImage = '' )
  I1I = '{0}?action=pelrec2&idgen={1}' . format ( Oo , IiIi )
  oOOOoo00 = True
  iii1 . append ( ( I1I , oo0 , oOOOoo00 ) )
 xbmcplugin . addDirectoryItems ( o0O , iii1 , len ( iii1 ) )
 xbmcplugin . endOfDirectory ( o0O )
 if 97 - 97: Ii11111i * I11i11Ii . OO0O0O
def I1Ii1111iIi ( idgen ) :
 I11 = sqlite3 . connect ( IiI )
 o0oO00oO0o0o0 = I11 . cursor ( )
 o0oO00oO0o0o0 . execute ( 'CREATE TABLE IF NOT EXISTS "vtas" (`id` INTEGER NOT NULL, `faffid` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 if 17 - 17: II1iI . O0 - ooO0OO000o + Iii1I1 / OO0O0O / i11iIiiIii
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reko" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 O00O0oOO00O00 . execute ( 'delete from reko;' )
 O0o0O00Oo0o0 . commit ( )
 O00O0oOO00O00 . execute ( "SELECT pelis.id,faffid,grupo FROM pelis INNER JOIN pelgen ON pelis.ID = pelgen.idpel WHERE pelis.valoracion>6.5 and pelgen.idgen=? ORDER BY pelis.id;" , ( idgen , ) )
 i1i = O00O0oOO00O00 . fetchall ( )
 I1IIIiI1I1ii1 = [ ]
 Oo0oOOo = [ ]
 iiiI1I1iIIIi1 = len ( i1i ) - 1
 from random import randint
 while 1 == 1 :
  Iii = randint ( 0 , iiiI1I1iIIIi1 )
  if Iii not in Oo0oOOo :
   Oo0oOOo . append ( Iii )
   oOoO0o00OO0 = i1i [ Iii ]
   I1iiiiI1iI = oOoO0o00OO0 [ 1 ]
   o0oO00oO0o0o0 . execute ( "SELECT id from vtas where faffid=?;" , ( I1iiiiI1iI , ) )
   iIiiiii1i = o0oO00oO0o0o0 . fetchone ( )
   if not iIiiiii1i :
    o0oO00oO0o0o0 . execute ( "INSERT INTO vtas(faffid) VALUES (?);" , ( I1iiiiI1iI , ) )
    I11 . commit ( )
    iiIi1IIiI = { }
    iiIi1IIiI [ 'grupo' ] = oOoO0o00OO0 [ 2 ]
    iiIi1IIiI [ 'id' ] = oOoO0o00OO0 [ 0 ]
    I1IIIiI1I1ii1 . append ( iiIi1IIiI )
    if len ( I1IIIiI1I1ii1 ) == 10 :
     break
   if len ( Oo0oOOo ) > iiiI1I1iIIIi1 :
    o0oO00oO0o0o0 . execute ( "DELETE FROM vtas;" )
    I11 . commit ( )
    break
 I11 . close ( )
 I1IIIiI1I1ii1 . sort ( key = lambda i1oO0OO0 : i1oO0OO0 [ 'grupo' ] )
 Ooo00O00o = [ ]
 for iiIi1IIiI in I1IIIiI1I1ii1 :
  O00O0oOO00O00 . execute ( 'INSERT INTO reko(idpel) VALUES (?);' , ( iiIi1IIiI [ 'id' ] , ) )
  Ooo00O00o . append ( str ( iiIi1IIiI [ 'id' ] ) )
 Ooo00O00o = '_%s' % '.' . join ( Ooo00O00o )
 O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN reko ON pelis.ID = reko.idpel ORDER BY reko.id;" )
 i1i = O00O0oOO00O00 . fetchall ( )
 O00O0oOO00O00 . execute ( 'delete from reko;' )
 O0o0O00Oo0o0 . commit ( )
 O0o0O00Oo0o0 . close ( )
 oo0000ooooO0o ( i1i , False , Ooo00O00o )
 if 82 - 82: O0 - O0 + oO0o
def II111Ii1i1 ( idgen ) :
 O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
 O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
 O00O0oOO00O00 . execute ( 'CREATE TABLE IF NOT EXISTS "reco" (`id` INTEGER NOT NULL, `idpel` INTEGER NOT NULL, PRIMARY KEY(`id`));' )
 O0o0O00Oo0o0 . commit ( )
 O00O0oOO00O00 . execute ( 'select idpel from reco order by id;' )
 i1i = O00O0oOO00O00 . fetchall ( )
 O0o0O00Oo0o0 . close ( )
 if i1i :
  OO0 = [ ]
  for oOoO0o00OO0 in i1i :
   OO0 . append ( str ( oOoO0o00OO0 [ 0 ] ) )
  OO0 = '_%s' % '.' . join ( OO0 )
  if 44 - 44: OOo000 - oOOOO / Iii1I1 * Ii11111i + ooO0OO000o / oO0o
  O0o0O00Oo0o0 = sqlite3 . connect ( Oo0O )
  O00O0oOO00O00 = O0o0O00Oo0o0 . cursor ( )
  O00O0oOO00O00 . execute ( "SELECT * FROM pelis INNER JOIN reco ON pelis.ID = reco.idpel ORDER BY reco.id;" )
  i1i = O00O0oOO00O00 . fetchall ( )
  O00O0oOO00O00 . execute ( 'delete from reco;' )
  O0o0O00Oo0o0 . commit ( )
  O0o0O00Oo0o0 . close ( )
  oo0000ooooO0o ( i1i , False , OO0 )
 else :
  I1Ii1111iIi ( idgen )
  if 88 - 88: OOO0o0o - iiI1i1 + o0oO0 . oOOOO % oOOOO
def oOOOOIi ( paramstring ) :
 Ii1ii111i1 = dict ( parse_qsl ( paramstring ) )
 if Ii1ii111i1 :
  if Ii1ii111i1 [ 'action' ] == 'genero' :
   I1i11i ( )
  if Ii1ii111i1 [ 'action' ] == 'genero2' :
   Ooo00O0o ( Ii1ii111i1 [ 'idgen' ] )
  if Ii1ii111i1 [ 'action' ] == 'tema' :
   I11i1II ( )
  if Ii1ii111i1 [ 'action' ] == 'tema2' :
   ooo000o000 ( Ii1ii111i1 [ 'idtem' ] )
  elif Ii1ii111i1 [ 'action' ] == 'anno' :
   IiIi1I1ii111 ( )
  elif Ii1ii111i1 [ 'action' ] == 'shlnk' :
   Oo00oo0oO ( Ii1ii111i1 [ 'server' ] , Ii1ii111i1 [ 'user' ] , Ii1ii111i1 [ 'cole' ] , Ii1ii111i1 [ 'peli' ] , Ii1ii111i1 [ 'last' ] )
  elif Ii1ii111i1 [ 'action' ] == 'anno2' :
   iIi1i1iIi1iI ( Ii1ii111i1 [ 'anno' ] )
  elif Ii1ii111i1 [ 'action' ] == 'grupo' :
   IiIii1i111 ( )
  elif Ii1ii111i1 [ 'action' ] == 'grupo2' :
   Ii1I11ii1i ( Ii1ii111i1 [ 'idgru' ] )
  elif Ii1ii111i1 [ 'action' ] == 'pais' :
   Ii1 ( )
  elif Ii1ii111i1 [ 'action' ] == 'pais2' :
   IiiI1i ( Ii1ii111i1 [ 'pais' ] )
  elif Ii1ii111i1 [ 'action' ] == 'bustit' :
   ii11I1 ( )
  elif Ii1ii111i1 [ 'action' ] == 'busdir' :
   Ii111iIi1iIi ( )
  elif Ii1ii111i1 [ 'action' ] == 'busdir2' :
   OoOoI1iI11iIiIi1 ( Ii1ii111i1 [ 'director' ] )
  elif Ii1ii111i1 [ 'action' ] == 'busact' :
   OO0ooo0oOO ( )
  elif Ii1ii111i1 [ 'action' ] == 'busact2' :
   oOOOooo ( Ii1ii111i1 [ 'idact' ] )
  elif Ii1ii111i1 [ 'action' ] == 'busgru' :
   OO0oOOoo ( )
  elif Ii1ii111i1 [ 'action' ] == 'ultim' :
   ooOO0oO0oo00o ( )
  elif Ii1ii111i1 [ 'action' ] == 'ultim2' :
   iIi11iiIiI1I ( )
  elif Ii1ii111i1 [ 'action' ] == 'ulthd' :
   i1i1I111iIi1 ( )
  elif Ii1ii111i1 [ 'action' ] == 'mvtas' :
   Ii ( )
  elif Ii1ii111i1 [ 'action' ] == 'pelrec' :
   i11iiI1111 ( )
  elif Ii1ii111i1 [ 'action' ] == 'pelrec2' :
   II111Ii1i1 ( Ii1ii111i1 [ 'idgen' ] )
  elif Ii1ii111i1 [ 'action' ] == 'peltop' :
   Oo00OoOo ( )
  elif Ii1ii111i1 [ 'action' ] == 'TopGen' :
   iiI1I1 ( Ii1ii111i1 [ 'idgen' ] )
  elif Ii1ii111i1 [ 'action' ] == 'TopTem' :
   i1II1I1Iii1 ( Ii1ii111i1 [ 'idtem' ] )
  elif Ii1ii111i1 [ 'action' ] == 'play' :
   o0OIiI1i ( Ii1ii111i1 [ 'server' ] , Ii1ii111i1 [ 'user' ] , Ii1ii111i1 [ 'cole' ] , Ii1ii111i1 [ 'peli' ] , Ii1ii111i1 [ 'id' ] , Ii1ii111i1 [ 'tit' ] )
 else :
  II1i111Ii1i ( )
  if 31 - 31: O0Oo0oO0o + Iii1I1
if __name__ == '__main__' :
 IiiIII111iI = sys . argv [ 2 ] [ 1 : ]
 oOOOOIi ( sys . argv [ 2 ] [ 1 : ] )
 if 87 - 87: i1iiIII111ii
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')